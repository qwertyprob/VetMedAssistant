@page "/Login"

@layout AuthLayout
@inject NavigationManager Navigation
@inject IUserService UserService
@inject IHttpContextAccessor HttpContext


<div class="container" style="margin-top: 200px;">

    <div class="row justify-content-center align-items-center">
        <div class="col-sm-12 d-flex justify-content-center align-items-center">
            <h1 class="text-center text-white" style="font-weight: bold; font-size: 3em; margin:30px 20px 30px;">VetAssist</h1>
        </div>

    </div>
</div>
@if (ShowSuccessModal)
{
    <div class="modal-toast">
        <div class="modal-content-toast">
            <p class="text fw-bold m-0" style="color:#1e3956;"> @Response</p>
        </div>
    </div>

}
<EditForm Model="@model" OnValidSubmit="HandleSubmit" FormName="loginForm">

    <div class="container" style="margin-top: 50px;">
        <div class="row">
            <div class="col-12 d-flex justify-content-center align-items-center">
                <div class="input-icon">
                    <i class="bi bi-person"></i>
                    <InputText @bind-Value="model.Email" class="form-control custom-input" id="exampleFormControlInput1" placeholder="Email address" autocomplete="on" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12 d-flex justify-content-center align-items-center">
                <div class="input-icon d-flex justify-content-center align-items-center">
                    <i class="bi bi-lock"></i>
                    <InputText @bind-Value="model.Password" type="password" class="form-control custom-input" id="exampleFormControlInput2" placeholder="Password" autocomplete="off" />
                </div>
            </div>
        </div>
    </div>

    <div class="container text-center mt-4">
        <div class="row justify-content-center">
            <div class="col-auto w-100">
                <button type="submit" class="btn btn-sign">Login</button>
            </div>
        </div>
    </div>
</EditForm>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>

@code {
    [SupplyParameterFromForm]
    public LoginViewModel model{ get; set; } = new();

    public string Response { get; set; }

    private readonly NavigationManager _navigationManager;



    private async Task HandleSubmit()
    {

        Response = await UserService.Login(model);
         ShowToast();


        if(Response == "Успешный логин")
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, "admin"),
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            await HttpContext.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

            Navigation.NavigateTo("/");
        }




    }

    private bool ShowSuccessModal = false;

    private async Task ShowToast()
    {
        ShowSuccessModal = true;
        StateHasChanged();
        await Task.Delay(2000);
        ShowSuccessModal = false;
        StateHasChanged();
    }
}
